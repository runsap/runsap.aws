- name: "Collect aws facts for instances in region '{{ region }}'"
  amazon.aws.ec2_instance_info:
    region: "{{ region }}"
    filters: "{{ aws_inventory_filters }}"
  register: ansible_instance_facts
  check_mode: no

- name: Add instance to dynamic inventory
  ansible.builtin.add_host:
    hostname: "{{ item.tags.Name }}"

    ansible_host: "{{ item[return_address_for_ansible_host] if item.state.name == 'running' else '127.0.30.1' }}"
    ansible_user: "{{ 'sap_admin' if item.tags.Operating_system == 'windows' else aws_tmp_user }}"
    ansible_password: "{{ winrm_password if item.tags.Operating_system == 'windows' else '' }}"
    ansible_connection: "{{ 'winrm' if item.tags.Operating_system == 'windows' else 'ssh' }}"
    ansible_port: "{{ '5986' if item.tags.Operating_system == 'windows' else '22' }}"
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
    ansible_become_method: "{{ 'runas' if item.tags.Operating_system == 'windows' else 'sudo' }}"

    groups:
      - "{{ aws_inventory_group }}"
      - "{{ env }}"
    region: "{{ region }}"
    ec2status: "{{ item }}"

    # host_data: per-host processed group_vars template inventory
    host_data: "{{ ( hostvars['localhost']['ec2']['hosts']
      | json_query(\"[?name=='\" + item.tags.Name + \"']\") )[0]
      | default({}) }}"

  changed_when: false
  loop: "{{ ansible_instance_facts.instances }}"
  loop_control:
    label: "{{ item.tags.Name }} - {{ item.instance_id }}/{{ aws_tmp_user }}"
  vars:
    aws_tmp_user: >-
      {{ aws_inventory_ansible_user
      if
        ( item.tags.Provision_status is defined and item.tags.Provision_status == 'done' )
      else
        aws_image_users[item.image_id] }}
